<header class="header flex w-[100%] z-[100] fixed">
    <div class="flex justify-between px-10 py-5 w-[100%] z-30 h-[100%]">
        <div>
            <a href="/" class="font-bold text-2xl text-[#FAF0E6]">Alejo<span class="text-[#865DFF]">Dev</span></a>
        </div>

        <div class="header-options flex justify-center w-[100%] max-sm:absolute -top-[300px] -z-10 max-sm:pt-[50px] pb-8 left-0 sm:items-end sm:justify-end sm:bg-transparent transition-all duration-700">
            <ul id="header-list" class="flex flex-col text-xl items-center transition-all text-[#FAF0E6] w-[100%] justify-between sm:flex-row sm:justify-end">
                <li class="px-[15px]"><a href="#projects">Projects</a></li>
                <li class="px-[15px]"><a href="#skills">Skills</a></li>
                <li class="px-[15px]"><a href="#aboutme">About me</a></li>
                <li class="px-[15px]"><a href="https://github.com/Alejandrox27?tab=repositories" target="_blank">Github repositories</a></li>
            </ul>
        </div>

        <div id="menu-container" class="sm:hidden">
            <input id="menu" type="checkbox" role="button" aria-label="Display the menu" class="menu">
        </div>
    </div>
    <div class="flex absolute w-[100vw] min-w-[1200px] h-screen justify-start align-top pointer-events-none">
        <svg id="waves" width="100%" viewBox="0 0 1000 1000" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="none" overflow="auto" shape-rendering="auto" fill="#ffffff" class="rotate-180 h-[32%] transition-all duration-500">
            <defs>
             <path id="wavepath" d="M 0 2000 0 500 Q 128.5 381 257 500 t 257 0 257 0 257 0 257 0 257 0  v1000 z" />
             <path id="motionpath" d="M -514 0 0 0" /> 
            </defs>
            <g >
             <use id="wave-color" xlink:href="#wavepath" y="74" fill="#200c41" class="transition-all duration-300">
             <animateMotion
              dur="5s"
              repeatCount="indefinite">
              <mpath xlink:href="#motionpath" />
             </animateMotion>
             </use>
            </g>
          </svg>
    </div>
    <div
    id="menu-backdrop"
    class="absolute bg-white/5 backdrop-blur-lg rounded-full
    translate-x-[var(--left)] translate-y-[var(--top)] left-0 top-0
    w-[var(--width)] h-[var(--height)]
    transition-all duration-300
    ease-in-out opacity-0 z-35 object-center
    ">

    </div>
</header>

<style>
.menu {
  --s: 30px; /* control the size */
  --c: white; /* the color */
  
  height: var(--s);
  aspect-ratio: 1;
  border: none;
  padding: 0;
  border-inline: calc(var(--s)/2) solid #0000; 
  box-sizing: content-box;
  --_g1: linear-gradient(var(--c) 20%,#0000 0 80%,var(--c) 0) 
         no-repeat content-box border-box;
  --_g2: radial-gradient(circle closest-side at 50% 12.5%,var(--c) 95%,#0000) 
         repeat-y content-box border-box;
  background: 
    var(--_g2) left  var(--_p,0px) top,
    var(--_g1) left  calc(var(--s)/10 + var(--_p,0px)) top,
    var(--_g2) right var(--_p,0px) top,
    var(--_g1) right calc(var(--s)/10 + var(--_p,0px)) top;
  background-size: 
    20% 80%,
    40% 100%;
  position: relative;
  clip-path: inset(0 25%);
  -webkit-mask: linear-gradient(90deg,#0000,#000 25% 75%,#0000);
  cursor: pointer;
  transition: 
    background-position .3s var(--_s,.3s), 
    clip-path 0s var(--_s,.6s);
  -webkit-appearance:none;
  -moz-appearance:none;
  appearance:none;
}
.menu:before,
.menu:after {
  content:"";
  position: absolute;
  border-radius: var(--s);
  inset: 40% 0;
  background: var(--c);
  transition: transform .3s calc(.3s - var(--_s,.3s));
}

.menu:checked {
  clip-path: inset(0);
  --_p: calc(-1*var(--s));
  --_s: 0s;
}

.menu:checked:before {
  transform: rotate(45deg);
}
.menu:checked:after {
  transform: rotate(-45deg);
}
.menu:focus-visible {
  clip-path: none;
  -webkit-mask: none;
  border: none;
  outline: 2px solid var(--c);
  outline-offset: 5px;
}

body {
  margin:0;
  min-height:100vh;
  display:grid;
  place-content:center;
}
</style>

<script>
    const listItems = document.querySelectorAll("#header-list li");
    const menuBackdrop = document.getElementById("menu-backdrop") as HTMLElement;
    
    const burgerButton = document.querySelector("#menu-container #menu");
    const wave = document.querySelector("#waves");
    const headerOptions = document.querySelector(".header-options");

    burgerButton.addEventListener('click', () => {
        if(burgerButton.checked){
            wave.classList.remove("h-[32%]");
            wave.classList.add("h-[100%]");
            headerOptions.classList.remove("-top-[300px]");
            headerOptions.classList.add("top-[60px]");
        }else {
            wave.classList.remove("h-[100%]");
            wave.classList.add("h-[32%]");
            headerOptions.classList.add("-top-[300px]");
            headerOptions.classList.remove("top-[60px]");
        }
    })

    listItems.forEach(item => {
        item.addEventListener('mouseenter', () => {
            const {left, top, width, height} = item.getBoundingClientRect()

            menuBackdrop.style.setProperty("--left", `${left}px`)
            menuBackdrop.style.setProperty("--top", `${top}px`)
            menuBackdrop.style.setProperty("--width", `${width}px`)
            menuBackdrop.style.setProperty("--height", `${height}px`)

            menuBackdrop.style.opacity = "1"
            menuBackdrop.style.visibility = "visible"
        })
        item.addEventListener('mouseleave', () => {
            menuBackdrop.style.opacity = "0"
            menuBackdrop.style.visibility = 'hidden'
        })
    })
</script>
<script>
  const wave = document.querySelector('#wave-color') as HTMLElement

  const observerOptions = {
      root: null,
      rootMargin: '0px',
      threshold: 0.90
  }

  const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
          const {isIntersecting} = entry
          if (isIntersecting){
              const color = entry.target.getAttribute('data-header-colors')
              wave.setAttribute('fill', color)
          }
      })
  }, observerOptions)

  const sectionElements = document.querySelectorAll('.landing-section')
  sectionElements.forEach(section => observer.observe(section))
</script>